{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ContactComponent = class ContactComponent {\n  constructor(serviceService, contactService, forbBuilder) {\n    this.serviceService = serviceService;\n    this.contactService = contactService;\n    this.forbBuilder = forbBuilder;\n    this.allServices = [];\n    this.selectedService = null;\n  }\n  // ********************************************************************** Create Employer **********************************************************************\n  initializeCreateContactform() {\n    this.CreateContactform = this.formBuilder.group({\n      firstname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n      lastname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n      telephone: ['', [Validators.required, Validators.pattern('^[0-9]{8}$')]],\n      email: ['', [Validators.required, Validators.email]],\n      nomCV: [null]\n    });\n  }\n  CreateEmployer() {\n    if (this.CreateContactform.valid) {\n      const formData = new FormData();\n      formData.append('employerDTO', JSON.stringify({\n        nom: this.CreateContactform.value.nom,\n        prenom: this.CreateContactform.value.prenom,\n        telephone: this.CreateContactform.value.telephone,\n        email: this.CreateContactform.value.email,\n        nomCV: this.CreateContactform.value.nomCV\n      }));\n      this.contactService.CreateContact(formData).subscribe({\n        next: response => {\n          this.CreateContactform.reset();\n        }\n      });\n    } else {\n      console.log('Formulaire invalide');\n    }\n  }\n};\nContactComponent = __decorate([Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})], ContactComponent);","map":{"version":3,"names":["Component","ContactComponent","constructor","serviceService","contactService","forbBuilder","allServices","selectedService","initializeCreateContactform","CreateContactform","formBuilder","group","firstname","Validators","required","pattern","lastname","telephone","email","nomCV","CreateEmployer","valid","formData","FormData","append","JSON","stringify","nom","value","prenom","CreateContact","subscribe","next","response","reset","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\achra\\OneDrive\\Bureau\\Portfolio\\frontend\\Portfolio\\src\\app\\components\\contact\\contact.component.ts"],"sourcesContent":["import { FormGroup } from '@angular/forms';\nimport { ContactService } from './../../services/Contact/contact.service';\nimport { ServiceService } from './../../services/Service/service.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Service } from 'src/app/models/Service';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent{\n  CreateContactform!: FormGroup;\n  allServices: Service[] = [];\n  selectedService: Service | null = null;\n\n  constructor(private serviceService: ServiceService, private contactService: ContactService, private forbBuilder){ }\n\n\n// ********************************************************************** Create Employer **********************************************************************\ninitializeCreateContactform(): void {\n  this.CreateContactform = this.formBuilder.group({\n    firstname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n    lastname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n    telephone: ['', [Validators.required, Validators.pattern('^[0-9]{8}$')]],\n    email: ['', [Validators.required, Validators.email]],\n    nomCV: [null],\n  });\n}\n\nCreateEmployer() {\n  if (this.CreateContactform.valid) {\n    const formData = new FormData();\n    formData.append('employerDTO', JSON.stringify({\n      nom: this.CreateContactform.value.nom,\n      prenom: this.CreateContactform.value.prenom,\n      telephone: this.CreateContactform.value.telephone,\n      email: this.CreateContactform.value.email,\n      nomCV: this.CreateContactform.value.nomCV,\n    }));\n    this.contactService.CreateContact(formData).subscribe({\n      next: (response) => {\n        this.CreateContactform.reset();\n      }      \n    })\n  }else {\n    console.log('Formulaire invalide');\n  }\n  \n}\n}\n"],"mappings":";AAGA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC,YAAoBC,cAA8B,EAAUC,cAA8B,EAAUC,WAAW;IAA3F,KAAAF,cAAc,GAAdA,cAAc;IAA0B,KAAAC,cAAc,GAAdA,cAAc;IAA0B,KAAAC,WAAW,GAAXA,WAAW;IAH/G,KAAAC,WAAW,GAAc,EAAE;IAC3B,KAAAC,eAAe,GAAmB,IAAI;EAE4E;EAGpH;EACAC,2BAA2BA,CAAA;IACzB,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACC,WAAW,CAACC,KAAK,CAAC;MAC9CC,SAAS,EAAE,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;MAC/EC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACH,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;MAC9EE,SAAS,EAAE,CAAC,EAAE,EAAE,CAACJ,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;MACxEG,KAAK,EAAE,CAAC,EAAE,EAAE,CAACL,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACK,KAAK,CAAC,CAAC;MACpDC,KAAK,EAAE,CAAC,IAAI;KACb,CAAC;EACJ;EAEAC,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACX,iBAAiB,CAACY,KAAK,EAAE;MAChC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/BD,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC;QAC5CC,GAAG,EAAE,IAAI,CAAClB,iBAAiB,CAACmB,KAAK,CAACD,GAAG;QACrCE,MAAM,EAAE,IAAI,CAACpB,iBAAiB,CAACmB,KAAK,CAACC,MAAM;QAC3CZ,SAAS,EAAE,IAAI,CAACR,iBAAiB,CAACmB,KAAK,CAACX,SAAS;QACjDC,KAAK,EAAE,IAAI,CAACT,iBAAiB,CAACmB,KAAK,CAACV,KAAK;QACzCC,KAAK,EAAE,IAAI,CAACV,iBAAiB,CAACmB,KAAK,CAACT;OACrC,CAAC,CAAC;MACH,IAAI,CAACf,cAAc,CAAC0B,aAAa,CAACR,QAAQ,CAAC,CAACS,SAAS,CAAC;QACpDC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAACxB,iBAAiB,CAACyB,KAAK,EAAE;QAChC;OACD,CAAC;KACH,MAAK;MACJC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;EAGtC;CACC;AAvCYnC,gBAAgB,GAAAoC,UAAA,EAL5BrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWvC,gBAAgB,CAuC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}