{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\nexport let ContactComponent = class ContactComponent {\n  constructor(contactService, formBuilder) {\n    this.contactService = contactService;\n    this.formBuilder = formBuilder;\n    this.allServices = [];\n    this.selectedService = null;\n  }\n  ngOnInit() {\n    this.initializeCreateContactform();\n  }\n  // ********************************************************************** Create Employer **********************************************************************\n  initializeCreateContactform() {\n    this.CreateContactform = this.formBuilder.group({\n      firstname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n      lastname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n      telephone: ['', [Validators.required, Validators.pattern('^[0-9]{8}$')]],\n      email: ['', [Validators.required, Validators.email]],\n      service: ['', [Validators.required]],\n      description: ['']\n    });\n  }\n  CreateEmployer() {\n    if (this.CreateContactform.valid) {\n      const fournisseurDTO = {\n        firstname: this.CreateContactform.value.firstname,\n        lastname: this.CreateContactform.value.lastname,\n        telephone: this.CreateContactform.value.telephone,\n        email: this.CreateContactform.value.email,\n        service: this.CreateContactform.value.service,\n        description: this.CreateContactform.value.description\n      };\n      this.contactService.CreateContact(fournisseurDTO).subscribe({\n        next: response => {\n          console.log(response);\n          this.CreateContactform.reset();\n        }\n      });\n    } else {\n      console.log('Formulaire invalide');\n    }\n  }\n};\nContactComponent = __decorate([Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})], ContactComponent);","map":{"version":3,"names":["Validators","Component","ContactComponent","constructor","contactService","formBuilder","allServices","selectedService","ngOnInit","initializeCreateContactform","CreateContactform","group","firstname","required","pattern","lastname","telephone","email","service","description","CreateEmployer","valid","fournisseurDTO","value","CreateContact","subscribe","next","response","console","log","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\achra\\OneDrive\\Bureau\\Portfolio\\frontend\\Portfolio\\src\\app\\components\\contact\\contact.component.ts"],"sourcesContent":["import { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ContactService } from './../../services/Contact/contact.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Service } from 'src/app/models/Service';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit{\n  CreateContactform!: FormGroup;\n  allServices: Service[] = [];\n  selectedService: Service | null = null;\n\n  constructor(private contactService: ContactService, \n    private formBuilder: FormBuilder){ }\n\n  ngOnInit(): void {\n    this.initializeCreateContactform();\n  }\n\n// ********************************************************************** Create Employer **********************************************************************\n  initializeCreateContactform(): void {\n    this.CreateContactform = this.formBuilder.group({\n      firstname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n      lastname: ['', [Validators.required, Validators.pattern('^[a-zA-ZÀ-ÿ\\\\s]+$')]],\n      telephone: ['', [Validators.required, Validators.pattern('^[0-9]{8}$')]],\n      email: ['', [Validators.required, Validators.email]],\n      service: ['', [Validators.required]],\n      description: ['']\n    });\n  }\n\n  CreateEmployer() {\n    if (this.CreateContactform.valid) {\n      const fournisseurDTO = {\n        firstname: this.CreateContactform.value.firstname,\n        lastname: this.CreateContactform.value.lastname,\n        telephone: this.CreateContactform.value.telephone,\n        email: this.CreateContactform.value.email,\n        service: this.CreateContactform.value.service,\n        description: this.CreateContactform.value.description\n      };\n      this.contactService.CreateContact(fournisseurDTO).subscribe({\n        next: (response) => {\n          console.log(response);\n          this.CreateContactform.reset();\n        }      \n      })\n    }else {\n      console.log('Formulaire invalide');\n    }\n  }\n}\n"],"mappings":";AAAA,SAAiCA,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC,YAAoBC,cAA8B,EACxCC,WAAwB;IADd,KAAAD,cAAc,GAAdA,cAAc;IACxB,KAAAC,WAAW,GAAXA,WAAW;IAJrB,KAAAC,WAAW,GAAc,EAAE;IAC3B,KAAAC,eAAe,GAAmB,IAAI;EAGD;EAErCC,QAAQA,CAAA;IACN,IAAI,CAACC,2BAA2B,EAAE;EACpC;EAEF;EACEA,2BAA2BA,CAAA;IACzB,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MAC9CC,SAAS,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;MAC/EC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;MAC9EE,SAAS,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;MACxEG,KAAK,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACiB,KAAK,CAAC,CAAC;MACpDC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAClB,UAAU,CAACa,QAAQ,CAAC,CAAC;MACpCM,WAAW,EAAE,CAAC,EAAE;KACjB,CAAC;EACJ;EAEAC,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACV,iBAAiB,CAACW,KAAK,EAAE;MAChC,MAAMC,cAAc,GAAG;QACrBV,SAAS,EAAE,IAAI,CAACF,iBAAiB,CAACa,KAAK,CAACX,SAAS;QACjDG,QAAQ,EAAE,IAAI,CAACL,iBAAiB,CAACa,KAAK,CAACR,QAAQ;QAC/CC,SAAS,EAAE,IAAI,CAACN,iBAAiB,CAACa,KAAK,CAACP,SAAS;QACjDC,KAAK,EAAE,IAAI,CAACP,iBAAiB,CAACa,KAAK,CAACN,KAAK;QACzCC,OAAO,EAAE,IAAI,CAACR,iBAAiB,CAACa,KAAK,CAACL,OAAO;QAC7CC,WAAW,EAAE,IAAI,CAACT,iBAAiB,CAACa,KAAK,CAACJ;OAC3C;MACD,IAAI,CAACf,cAAc,CAACoB,aAAa,CAACF,cAAc,CAAC,CAACG,SAAS,CAAC;QAC1DC,IAAI,EAAGC,QAAQ,IAAI;UACjBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;UACrB,IAAI,CAACjB,iBAAiB,CAACoB,KAAK,EAAE;QAChC;OACD,CAAC;KACH,MAAK;MACJF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;EAEtC;CACD;AA5CY3B,gBAAgB,GAAA6B,UAAA,EAL5B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWhC,gBAAgB,CA4C5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}