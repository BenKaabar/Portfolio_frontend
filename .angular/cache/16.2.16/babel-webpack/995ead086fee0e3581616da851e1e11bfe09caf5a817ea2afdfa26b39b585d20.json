{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let WorkComponent = class WorkComponent {\n  constructor(WorkService, languageService) {\n    this.WorkService = WorkService;\n    this.languageService = languageService;\n    this.allWorks = [];\n    this.selectedWork = null;\n  }\n  ngOnInit() {\n    this.getallWorks();\n    this.checkLanguage();\n  }\n  // ********************************************************************** Display Work **********************************************************************\n  getallWorks() {\n    this.WorkService.AllWork().subscribe({\n      next: response => {\n        this.allWorks = response.map(Work => {\n          return {\n            ...Work,\n            filephoto: 'data:image/jpeg;base64,' + Work.filephoto,\n            cvFile: 'data:image/pdf;base64,' + Work.cvFile\n          };\n        });\n        if (this.allWorks.length > 0) {\n          this.selectedWork = this.allWorks[0];\n        }\n      },\n      error: err => {\n        console.error(\"Error fetching Works: \", err);\n      }\n    });\n  }\n};\nWorkComponent = __decorate([Component({\n  selector: 'app-work',\n  templateUrl: './work.component.html',\n  styleUrls: ['./work.component.css']\n})], WorkComponent);","map":{"version":3,"names":["Component","WorkComponent","constructor","WorkService","languageService","allWorks","selectedWork","ngOnInit","getallWorks","checkLanguage","AllWork","subscribe","next","response","map","Work","filephoto","cvFile","length","error","err","console","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\achra\\OneDrive\\Bureau\\Portfolio\\frontend\\Portfolio\\src\\app\\components\\work\\work.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WorkService } from 'src/app/services/Work/work.service';\n\n@Component({\n  selector: 'app-work',\n  templateUrl: './work.component.html',\n  styleUrls: ['./work.component.css']\n})\nexport class WorkComponent implements OnInit{\n  allWorks: any[] = [];\n  selectedWork: Work | null = null;\n  currentLanguage!: string;\n\n  constructor(private WorkService: WorkService, private languageService: LanguageService){ }\n\n  ngOnInit(): void {\n    this.getallWorks();\n    this.checkLanguage();\n  }\n\n// ********************************************************************** Display Work **********************************************************************\n  getallWorks() {\n    this.WorkService.AllWork().subscribe({\n      next: (response) => {\n        this.allWorks = response.map(Work => {\n          return {\n            ...Work,\n            filephoto: 'data:image/jpeg;base64,' + Work.filephoto,\n            cvFile: 'data:image/pdf;base64,' + Work.cvFile \n          };\n        });\n\n        if (this.allWorks.length > 0) {\n          this.selectedWork = this.allWorks[0];\n        }\n      },\n      error: (err) => {\n        console.error(\"Error fetching Works: \", err);\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAKxBC,YAAoBC,WAAwB,EAAUC,eAAgC;IAAlE,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,eAAe,GAAfA,eAAe;IAJrE,KAAAC,QAAQ,GAAU,EAAE;IACpB,KAAAC,YAAY,GAAgB,IAAI;EAGyD;EAEzFC,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAClB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEF;EACED,WAAWA,CAAA;IACT,IAAI,CAACL,WAAW,CAACO,OAAO,EAAE,CAACC,SAAS,CAAC;MACnCC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACR,QAAQ,GAAGQ,QAAQ,CAACC,GAAG,CAACC,IAAI,IAAG;UAClC,OAAO;YACL,GAAGA,IAAI;YACPC,SAAS,EAAE,yBAAyB,GAAGD,IAAI,CAACC,SAAS;YACrDC,MAAM,EAAE,wBAAwB,GAAGF,IAAI,CAACE;WACzC;QACH,CAAC,CAAC;QAEF,IAAI,IAAI,CAACZ,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;UAC5B,IAAI,CAACZ,YAAY,GAAG,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;;MAExC,CAAC;MACDc,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;MAC9C;KACD,CAAC;EACJ;CACD;AAjCYnB,aAAa,GAAAqB,UAAA,EALzBtB,SAAS,CAAC;EACTuB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWxB,aAAa,CAiCzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}