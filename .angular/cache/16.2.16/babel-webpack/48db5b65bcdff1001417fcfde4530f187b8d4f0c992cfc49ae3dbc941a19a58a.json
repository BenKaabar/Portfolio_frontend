{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nexport let NavbarComponent = class NavbarComponent {\n  constructor(translate) {\n    this.translate = translate;\n    this.isNavbarCollapsed = true;\n    this.isSidebarVisible = false;\n    this.isDarkMode = false;\n    this.selectedLanguage = 'en';\n    const storedDarkMode = localStorage.getItem('darkMode');\n    this.isDarkMode = storedDarkMode === 'true';\n    this.applyDarkMode();\n    translate.setDefaultLang('en'); // Langue par défaut\n    translate.use('en'); // Définir la langue actuelle\n  }\n\n  switchLanguage(language) {\n    this.translate.use(language);\n  }\n  ngOnInit() {\n    this.checkScreenSize();\n  }\n  onResize(event) {\n    this.checkScreenSize();\n  }\n  toggleSidebar() {\n    this.isSidebarVisible = !this.isSidebarVisible;\n  }\n  // toggledark(){\n  //   this.isDarkMode  = !this.isDarkMode ;\n  // }\n  checkScreenSize() {\n    this.isNavbarCollapsed = window.innerWidth <= 575;\n  }\n  applyDarkMode() {\n    if (this.isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }\n  toggleDarkMode() {\n    this.isDarkMode = !this.isDarkMode;\n    localStorage.setItem('darkMode', this.isDarkMode.toString());\n    if (this.isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }\n};\n__decorate([HostListener('window:resize', ['$event'])], NavbarComponent.prototype, \"onResize\", null);\nNavbarComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})], NavbarComponent);","map":{"version":3,"names":["Component","HostListener","NavbarComponent","constructor","translate","isNavbarCollapsed","isSidebarVisible","isDarkMode","selectedLanguage","storedDarkMode","localStorage","getItem","applyDarkMode","setDefaultLang","use","switchLanguage","language","ngOnInit","checkScreenSize","onResize","event","toggleSidebar","window","innerWidth","document","body","classList","add","remove","toggleDarkMode","setItem","toString","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\achra\\OneDrive\\Bureau\\Portfolio\\frontend\\Portfolio\\src\\app\\shared\\navbar\\navbar.component.ts"],"sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit{\n  isNavbarCollapsed: boolean = true;\n  isSidebarVisible : boolean = false;\n  isDarkMode = false;\n  selectedLanguage = 'en';\n  \n  constructor(private translate: TranslateService) {\n    const storedDarkMode = localStorage.getItem('darkMode');\n    this.isDarkMode = storedDarkMode === 'true';\n    this.applyDarkMode();\n    translate.setDefaultLang('en'); // Langue par défaut\n    translate.use('en'); // Définir la langue actuelle\n  }\n\n  switchLanguage(language: string) {\n    this.translate.use(language);\n  }\n  ngOnInit() {\n    this.checkScreenSize();\n  }\n  \n  @HostListener('window:resize', ['$event'])\n  onResize(event: Event) { \n    this.checkScreenSize();\n  }\n  toggleSidebar(){\n    this.isSidebarVisible  = !this.isSidebarVisible ;\n  }  \n  // toggledark(){\n  //   this.isDarkMode  = !this.isDarkMode ;\n  // }\n  checkScreenSize() {\n    this.isNavbarCollapsed = window.innerWidth <= 575;\n  }\n  applyDarkMode() {\n    if (this.isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }\n  toggleDarkMode() {\n    this.isDarkMode = !this.isDarkMode;\n    localStorage.setItem('darkMode', this.isDarkMode.toString());\n\n    if (this.isDarkMode) {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,QAAgB,eAAe;AAQxD,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAM1BC,YAAoBC,SAA2B;IAA3B,KAAAA,SAAS,GAATA,SAAS;IAL7B,KAAAC,iBAAiB,GAAY,IAAI;IACjC,KAAAC,gBAAgB,GAAa,KAAK;IAClC,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,gBAAgB,GAAG,IAAI;IAGrB,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,IAAI,CAACJ,UAAU,GAAGE,cAAc,KAAK,MAAM;IAC3C,IAAI,CAACG,aAAa,EAAE;IACpBR,SAAS,CAACS,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IAChCT,SAAS,CAACU,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB;;EAEAC,cAAcA,CAACC,QAAgB;IAC7B,IAAI,CAACZ,SAAS,CAACU,GAAG,CAACE,QAAQ,CAAC;EAC9B;EACAC,QAAQA,CAAA;IACN,IAAI,CAACC,eAAe,EAAE;EACxB;EAGAC,QAAQA,CAACC,KAAY;IACnB,IAAI,CAACF,eAAe,EAAE;EACxB;EACAG,aAAaA,CAAA;IACX,IAAI,CAACf,gBAAgB,GAAI,CAAC,IAAI,CAACA,gBAAgB;EACjD;EACA;EACA;EACA;EACAY,eAAeA,CAAA;IACb,IAAI,CAACb,iBAAiB,GAAGiB,MAAM,CAACC,UAAU,IAAI,GAAG;EACnD;EACAX,aAAaA,CAAA;IACX,IAAI,IAAI,CAACL,UAAU,EAAE;MACnBiB,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;KACzC,MAAM;MACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;;EAE/C;EACAC,cAAcA,CAAA;IACZ,IAAI,CAACtB,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;IAClCG,YAAY,CAACoB,OAAO,CAAC,UAAU,EAAE,IAAI,CAACvB,UAAU,CAACwB,QAAQ,EAAE,CAAC;IAE5D,IAAI,IAAI,CAACxB,UAAU,EAAE;MACnBiB,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;KACzC,MAAM;MACLH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;;EAE/C;CACD;AA7BCI,UAAA,EADC/B,YAAY,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC,CAAC,C,8CAGzC;AAxBUC,eAAe,GAAA8B,UAAA,EAL3BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWjC,eAAe,CAmD3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}