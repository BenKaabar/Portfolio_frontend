{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../services/auth/auth.service\";\nexport let HttpInterceptorInterceptor = /*#__PURE__*/(() => {\n  class HttpInterceptorInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n    intercept(request, next) {\n      if (!request.url.includes(\"/auth/login\") && !request.url.includes(\"/Contact/CreateContact\") && !request.url.includes(\"/Home/AllHome\") && !request.url.includes(\"/ResumeEducation/AllResumeEducation\") && !request.url.includes(\"/ResumeExperience/AllResumeExperience\") && !request.url.includes(\"/ResumeSkills/AllResumeSkills\") && !request.url.includes(\"/Service/AllServices\") && !request.url.includes(\"/Work/AllWork\") && !request.url.includes(\"/Home/UpdatedHome\")) {\n        let newRequest = request.clone({\n          headers: request.headers.set('Authorization', 'Bearer ' + this.authService.accessToken)\n        });\n        return next.handle(newRequest).pipe(catchError(err => {\n          if (err.status == 401) {\n            this.authService.Logout();\n          }\n          return throwError(() => new Error(err.message));\n        }));\n      } else return next.handle(request);\n    }\n    static {\n      this.ɵfac = function HttpInterceptorInterceptor_Factory(t) {\n        return new (t || HttpInterceptorInterceptor)(i0.ɵɵinject(i1.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: HttpInterceptorInterceptor,\n        factory: HttpInterceptorInterceptor.ɵfac\n      });\n    }\n  }\n  return HttpInterceptorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}