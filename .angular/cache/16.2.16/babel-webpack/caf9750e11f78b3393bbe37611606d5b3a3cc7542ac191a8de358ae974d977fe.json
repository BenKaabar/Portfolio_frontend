{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:2603/auth';\n    this.isAuthenticated = false;\n  }\n  Login(username, password) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    const body = new HttpParams().set('username', username).set('password', password).toString();\n    console.log(body);\n    return this.http.post(`${this.apiUrl}/login`, body, {\n      headers\n    });\n  }\n  LoadProfile(data) {\n    this.isAuthenticated = true;\n    this.accessToken = data['access-token'];\n    let decodedJwt = jwtDecode(this.accessToken);\n    this.username = decodedJwt.sub;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","jwtDecode","AuthService","constructor","http","router","apiUrl","isAuthenticated","Login","username","password","headers","body","set","toString","console","log","post","LoadProfile","data","accessToken","decodedJwt","sub","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\achra\\OneDrive\\Bureau\\Portfolio\\frontend\\Portfolio\\src\\app\\services\\auth\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { jwtDecode } from 'jwt-decode';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:2603/auth';\n  accessToken!: string;\n  isAuthenticated : boolean = false;\n  roles :any;\n  username: any;\n\n  constructor(private http:HttpClient, private router: Router) { }\n\n  Login(username: string, password: string) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n  \n    const body = new HttpParams()\n      .set('username', username)\n      .set('password', password)\n      .toString();\n    console.log(body)\n    return this.http.post(`${this.apiUrl}/login`, body, { headers });\n  }\n  LoadProfile(data: any){\n    this.isAuthenticated = true;\n    this.accessToken = data['access-token'];\n    let decodedJwt: any = jwtDecode(this.accessToken);\n    this.username = decodedJwt.sub\n  }\n}  \n\n// Login(username: string, password: string){\n  //   let options = {\n  //     headers : new HttpHeaders().set(\"Content-Type\",\"application/x-www-form-urlencoded\")\n  //   }\n  //   let params = new HttpParams()\n  //     .set(\"username\", username)\n  //     .set(\"password\", password);\n  //     console.log(params)\n  //   return this.http.post(`${this.apiUrl}/login`, params, options);\n  // }\n\n\n\n\n    // private isAuthenticated = new BehaviorSubject<String>(\"false\");\n  // isAuthenticated$ = this.isAuthenticated.asObservable();\n\n  // private role = new BehaviorSubject<String>(\"\");\n  // role$ = this.role.asObservable();\n\n  // private username = new BehaviorSubject<string>(\"\");\n  // username$ = this.username.asObservable();\n\n  // private accessToken = new BehaviorSubject<string>(\"\");\n  // accessToken$ = this.accessToken.asObservable();\n  // public loadProfile(data: any) {\n  //   const newisAuthenticated = \"true\";\n  //   localStorage.setItem(\"isAuthenticated\",newisAuthenticated)\n  //   this.isAuthenticated.next(newisAuthenticated);\n\n  //   const newisaccessToken = data['acces-token'];\n  //   localStorage.setItem(\"accestoken\",newisaccessToken)\n  //   this.accessToken.next(newisaccessToken);\n\n  //   let decodedJwt: any = jwtDecode(newisaccessToken);\n\n  //   const newusername = decodedJwt.sub;\n  //   const id=decodedJwt.sub;\n  //   localStorage.setItem(\"username\",newusername)\n  //   this.username.next(newusername);\n\n  //   const newrole = decodedJwt.scope;\n  //   localStorage.setItem(\"role\",newrole)\n  //   this.role.next(newrole);\n  //   this.router.navigateByUrl(\"Home\")\n  // }\n\n"],"mappings":"AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAG1E,SAASC,SAAS,QAAQ,YAAY;;;;AAMtC,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAe,EAAUC,MAAc;IAAvC,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAN3C,KAAAC,MAAM,GAAG,4BAA4B;IAE7C,KAAAC,eAAe,GAAa,KAAK;EAI8B;EAE/DC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEF,MAAMa,IAAI,GAAG,IAAIZ,UAAU,EAAE,CAC1Ba,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC,CACzBI,GAAG,CAAC,UAAU,EAAEH,QAAQ,CAAC,CACzBI,QAAQ,EAAE;IACbC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACjB,OAAO,IAAI,CAACR,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACX,MAAM,QAAQ,EAAEM,IAAI,EAAE;MAAED;IAAO,CAAE,CAAC;EAClE;EACAO,WAAWA,CAACC,IAAS;IACnB,IAAI,CAACZ,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACa,WAAW,GAAGD,IAAI,CAAC,cAAc,CAAC;IACvC,IAAIE,UAAU,GAAQpB,SAAS,CAAC,IAAI,CAACmB,WAAW,CAAC;IACjD,IAAI,CAACX,QAAQ,GAAGY,UAAU,CAACC,GAAG;EAChC;;;uBA1BWpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAX1B,WAAW;MAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}