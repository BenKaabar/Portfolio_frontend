{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let DashboardResumeExperienceComponent = class DashboardResumeExperienceComponent {\n  constructor(WorkService, formBuilder) {\n    this.WorkService = WorkService;\n    this.formBuilder = formBuilder;\n    this.allResumeExperience = [];\n    this.selectedWork = null;\n    this.isConsultModalOpen = false;\n    this.isCreateModalOpen = false;\n    this.selectedFile = null;\n  }\n  ngOnInit() {\n    this.getAllWork();\n    this.initializeCreateWorkform();\n  }\n  // ********************************************************************** Display work **********************************************************************\n  getAllWork() {\n    this.WorkService.AllWorks().subscribe({\n      next: response => {\n        this.allWork = response;\n      }\n    });\n  }\n  //  ********************************************************************** Consulting work **********************************************************************\n  openConsultModal(Work) {\n    console.log(Work);\n    this.selectedWork = Work;\n    this.isConsultModalOpen = true;\n  }\n  closeConsultModal() {\n    this.isConsultModalOpen = false;\n  }\n  //  ********************************************************************** delete work **********************************************************************\n  toDelete(idWork) {\n    this.WorkService.deleteWork(idWork).subscribe({\n      next: response => {\n        this.allWork = this.allWork.filter(Work => Work.idWork !== idWork);\n        this.getAllWork();\n      }\n    });\n  }\n  //  ********************************************************************** Create work **********************************************************************\n  initializeCreateWorkform() {\n    this.CreateWorkform = this.formBuilder.group({\n      projectType: ['', [Validators.required]],\n      title: ['', [Validators.required]],\n      shortDescription: ['', [Validators.required]],\n      longDescription: ['', [Validators.required]],\n      mainTechnology: ['', [Validators.required]],\n      allTechnology: ['', [Validators.required]],\n      github: ['', [Validators.required]],\n      video: ['', [Validators.required]],\n      file: [null, [Validators.required]]\n    });\n  }\n  openCreateModal() {\n    this.isCreateModalOpen = true;\n  }\n  closeCreateModal() {\n    this.isCreateModalOpen = false;\n  }\n  CreateWork() {\n    if (this.CreateWorkform.valid) {\n      const formData = new FormData();\n      formData.append('workRequestDTO', JSON.stringify({\n        projectType: this.CreateWorkform.value.projectType,\n        title: this.CreateWorkform.value.title,\n        shortDescription: this.CreateWorkform.value.shortDescription,\n        longDescription: this.CreateWorkform.value.longDescription,\n        mainTechnology: this.CreateWorkform.value.mainTechnology,\n        allTechnology: this.CreateWorkform.value.allTechnology,\n        github: this.CreateWorkform.value.github,\n        video: this.CreateWorkform.value.video\n      }));\n      if (this.selectedFile && this.selectedFile instanceof File) {\n        formData.append('photoWork', this.selectedFile, this.selectedFile.name);\n      }\n      this.WorkService.CreateWork(formData).subscribe({\n        next: response => {\n          this.closeCreateModal();\n          this.CreateWorkform.reset();\n          this.getAllWork();\n        }\n      });\n    } else {\n      console.log('Formulaire invalide');\n    }\n  }\n  //  ********************************************************************** file **********************************************************************\n  onFileChange(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        if (e.target?.result) {\n          this.selectedUrlFile = e.target.result;\n        }\n      };\n      reader.readAsDataURL(file);\n      this.CreateWorkform.patchValue({\n        file: file\n      });\n      this.selectedFile = file;\n    } else {\n      console.error(\"Aucun fichier sélectionné ou fichier invalide\");\n    }\n  }\n};\nDashboardResumeExperienceComponent = __decorate([Component({\n  selector: 'app-dashboard-resume-experience',\n  templateUrl: './dashboard-resume-experience.component.html',\n  styleUrls: ['./dashboard-resume-experience.component.css']\n})], DashboardResumeExperienceComponent);","map":{"version":3,"names":["Component","Validators","DashboardResumeExperienceComponent","constructor","WorkService","formBuilder","allResumeExperience","selectedWork","isConsultModalOpen","isCreateModalOpen","selectedFile","ngOnInit","getAllWork","initializeCreateWorkform","AllWorks","subscribe","next","response","allWork","openConsultModal","Work","console","log","closeConsultModal","toDelete","idWork","deleteWork","filter","CreateWorkform","group","projectType","required","title","shortDescription","longDescription","mainTechnology","allTechnology","github","video","file","openCreateModal","closeCreateModal","CreateWork","valid","formData","FormData","append","JSON","stringify","value","File","name","reset","onFileChange","event","target","files","reader","FileReader","onload","e","result","selectedUrlFile","readAsDataURL","patchValue","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\achra\\OneDrive\\Bureau\\Portfolio\\frontend\\Portfolio\\src\\app\\components\\dashboard\\dashboardResume\\dashboard-resume-experience\\dashboard-resume-experience.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ResumeExperience } from 'src/app/models/ResumeExperience';\n\n@Component({\n  selector: 'app-dashboard-resume-experience',\n  templateUrl: './dashboard-resume-experience.component.html',\n  styleUrls: ['./dashboard-resume-experience.component.css']\n})\nexport class DashboardResumeExperienceComponent implements OnInit{\n  allResumeExperience: ResumeExperience[] = [];\n  selectedWork:ResumeExperience | null = null;\n  isConsultModalOpen = false;\n  isCreateModalOpen =false;\n  CreateWorkform!: FormGroup;\n  selectedFile: File | null = null;\n  selectedUrlFile: any;\n\n  constructor(private WorkService: WorkService,\n     private formBuilder: FormBuilder){}\n  \n  ngOnInit(): void {\n    this.getAllWork();\n    this.initializeCreateWorkform();\n  }\n\n// ********************************************************************** Display work **********************************************************************\n  getAllWork() {\n    this.WorkService.AllWorks().subscribe({\n      next: (response)=>{\n        this.allWork = response;\n      },\n    })\n  }\n\n//  ********************************************************************** Consulting work **********************************************************************\n  openConsultModal(Work: Work) {\n    console.log(Work)\n    this.selectedWork = Work;\n    this.isConsultModalOpen = true;\n  }\n  closeConsultModal() {\n    this.isConsultModalOpen = false;\n  }\n\n//  ********************************************************************** delete work **********************************************************************\n  toDelete(idWork: string): void{\n    this.WorkService.deleteWork(idWork).subscribe({\n      next:(response)=>{\n        this.allWork = this.allWork.filter(Work => Work.idWork !== idWork);\n        this.getAllWork();\n      },\n    });\n  }\n  \n//  ********************************************************************** Create work **********************************************************************\n  initializeCreateWorkform(): void {\n    this.CreateWorkform = this.formBuilder.group({\n      projectType: ['', [Validators.required]],\n      title: ['', [Validators.required]],\n      shortDescription: ['', [Validators.required]],\n      longDescription: ['', [Validators.required]],\n      mainTechnology: ['', [Validators.required]],\n      allTechnology: ['', [Validators.required]],\n      github: ['', [Validators.required]],\n      video: ['', [Validators.required]],\n      file: [null, [Validators.required]]\n    });\n  }\n  openCreateModal() {\n    this.isCreateModalOpen = true;\n  }\n  closeCreateModal() {\n    this.isCreateModalOpen = false;\n  }\n  CreateWork(){\n    if (this.CreateWorkform.valid) {\n      const formData = new FormData();\n      formData.append('workRequestDTO', JSON.stringify({\n        projectType: this.CreateWorkform.value.projectType,\n        title: this.CreateWorkform.value.title,\n        shortDescription: this.CreateWorkform.value.shortDescription,\n        longDescription: this.CreateWorkform.value.longDescription,\n        mainTechnology: this.CreateWorkform.value.mainTechnology,\n        allTechnology: this.CreateWorkform.value.allTechnology,\n        github: this.CreateWorkform.value.github,\n        video: this.CreateWorkform.value.video,\n      }));\n      if (this.selectedFile && this.selectedFile instanceof File) {\n        formData.append('photoWork', this.selectedFile, this.selectedFile.name);\n      }\n      this.WorkService.CreateWork(formData).subscribe({\n        next: (response) => {\n          this.closeCreateModal();\n          this.CreateWorkform.reset();\n          this.getAllWork();\n        }      \n      })\n    }else {\n      console.log('Formulaire invalide');\n    }\n  }\n\n//  ********************************************************************** file **********************************************************************\n  onFileChange(event: any): void {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        if (e.target?.result) {\n          this.selectedUrlFile = e.target.result;\n        }\n      };\n      reader.readAsDataURL(file);\n      this.CreateWorkform.patchValue({ file: file });\n      this.selectedFile = file;\n    } else {\n      console.error(\"Aucun fichier sélectionné ou fichier invalide\");\n    }\n  }\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}